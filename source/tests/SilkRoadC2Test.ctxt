#BlueJ class context
comment0.target=SilkRoadC2Test
comment1.params=
comment1.target=void\ prelude()
comment10.params=
comment10.target=void\ accordingPMoneStoreShouldBeEmptyAfterSingleRobotMove()
comment11.params=
comment11.target=void\ accordingPMcorrespondingStoresShouldBeEmptiedForEachRobot()
comment12.params=
comment12.target=void\ accordingPMnoRobotShouldLeaveStoresFullIfNoRobotsExist()
comment13.params=
comment13.target=void\ accordingPMstoreShouldKeepAccumulativeCountAfterReboot()
comment14.params=
comment14.target=void\ accordingPMmultipleStoresShouldAccumulateCountsOverDays()
comment15.params=
comment15.target=void\ accordingPMSholdNotBeAnyProfitIfThereAreNoMovements()
comment15.text=\r\n\ profitPerMove\ -----------------------------------------------------------------------\r\n\ 1)\ si\ ningun\ robot\ se\ mueve,\ no\ se\ deberia\ generar\ ningun\ profit\r\n\ 2)\ cuando\ un\ robot\ se\ mueve\ sin\ ir\ a\ una\ tienda\ tiene\ movimientos\ negativos\r\n\ 3)\ cuando\ un\ robot\ se\ mueve\ a\ una\ tienda\ se\ debe\ reflejar\ sus\ ganacias\r\n\ 4)\ registrar\ logs\ correctamente\r\n\ 5)\ logs\ independientes\r\n
comment16.params=
comment16.target=void\ accordingPMshouldNegativeProfitsCountToo()
comment17.params=
comment17.target=void\ accordingPMshouldHavePositiveProfitWhenRobotCollectsTenges()
comment18.params=
comment18.target=void\ accordingPMshouldTrackAllProfitsPerMove()
comment19.params=
comment19.target=void\ accordingPMshouldKeepIndependentProfitsForEachRobot()
comment2.params=
comment2.target=void\ preludeach()
comment3.params=
comment3.target=void\ accordingPMshouldGoToTheOnlyExistingStore()
comment3.text=\r\n\ moveRobots\ --------------------------------------------------------------------------\r\n\ 1)\ si\ solo\ hay\ un\ robot\ y\ una\ tienda,\ el\ robot\ deberia\ ir\ a\ esa\ tienda\r\n\ 2)\ robot\ debera\ ir\ a\ la\ tienda\ mas\ cercana\ si\ ambas\ tiendas\ tiene\ misma\ cantidad\ de\ tenges\r\n\ 3)\ los\ robots\ deben\ ir\ a\ las\ tiendas\ mas\ cercanas\ (0,\ 1,\ 2)\ va\ a\ (3,\ 4,\ 5)\r\n\ 4)\ debe\ ir\ a\ la\ tienda\ mas\ lejana,\ siempre\ y\ cuando\ produzca\ mayor\ profit\r\n\ 5)\ el\ robot\ no\ se\ deberia\ mover\ si\ la\ tienda\ produce\ profit\ negativo\r\n\ 6)\ el\ robot\ no\ se\ deberia\ mover\ si\ no\ hay\ tiendas\ a\ las\ cuales\r\n
comment4.params=
comment4.target=void\ accordingPMshouldGoToTheClosestStoreIfBorhStoresHaveSameAmountOfTenges()
comment5.params=
comment5.target=void\ accordingPMshouldR1GoesS1R2GoesS2RnGoesSn()
comment6.params=
comment6.target=void\ accordingPMshouldGoToFarestStoreAsLongAsItProducesMoreProfit()
comment7.params=
comment7.target=void\ accordingPMshouldSkipStoreIfProfitIsNegative()
comment8.params=
comment8.target=void\ accordingPMshouldNotMoveIfThereAreNoStores()
comment9.params=
comment9.target=void\ accordingPMnoStoreShouldBeEmptyAtBeginning()
comment9.text=\r\n\ emptiedStores\ -----------------------------------------------------------------------\r\n\ 1)\ ninguna\ tienda\ esta\ vacia\ al\ inicio\ de\ un\ dia\r\n\ 2)\ despues\ que\ una\ tienda\ sea\ desocupada\ por\ un\ robot,\ el\ retorno\ debera\ ser\ {pos,\ 1}\r\n\ 3)\ test\ (2)\ pero\ aplicado\ a\ mas\ tiendas\ con\ mas\ robots\r\n\ 4)\ si\ no\ hay\ robots\ ninguna\ tienda\ deberia\ ser\ desocupada\r\n\ 5)\ el\ numero\ de\ veces\ que\ ha\ sido\ vaciada\ no\ se\ reinicia\ a\ cero,\ sino\ que\ se\ mantiene\r\n\ 6)\ mismo\ que\ (5)\ pero\ con\ otra\ tienda\r\n
numComments=20
